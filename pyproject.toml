[tool.poetry]
name = "lambda-project"
version = "0.1.0"
description = "Lambda Project"
authors = ["Darren Weber <dweber.consulting@gmail.com>"]

readme = "README.md"  # Markdown files are supported
repository = "https://github.com:dazza-codes/aws-lambda-layer-packing.git"
homepage = "https://github.com:dazza-codes/aws-lambda-layer-packing.git"

keywords = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Utilities",
]

include = ["lambda_project/**/*"]
exclude = ["tests/**/*"]

packages = [
    {include = "lambda_project"}
]

[tool.poetry.dependencies]
python = "^3.6"
dataclasses = {version = "*", python = "~3.6.0"}

# utils
requests = "^2.23"

#
# Optional parquet packages
#
pyarrow = { version = "^1.0", optional = true }
fastparquet = { version = "*", optional = true }
s3fs = { version = "*", optional = true }

# Optional GIS packages
# - binary wheels provide gdal and proj binaries
# - TODO: review github projects for CI versions
#
numpy = { version = "^1.18.1", optional = true }
geopandas = { version = "^0.6.1", optional = true }
geojson = { version = "^2.5.0", optional = true }
fiona = { version = "^1.8.13", optional = true }  # for geopandas
pycrs = { version = "^1.0.1", optional = true }
pyproj = { version = "2.4.2", optional = true }  # for geopandas
shapely = { version = "1.7.0", optional = true } # for geopandas
rasterio = { version = "1.1.2", optional = true }
rasterstats = { version = "0.14.0", optional = true }
s2sphere = { version = "^0.2.5", optional = true }


[tool.poetry.extras]
gis =[
    "numpy",
    "geopandas",
    "geojson",
    "fiona",
    "pycrs",
    "pyproj",
    "shapely",
    "rasterio",
    "rasterstats",
    "s2sphere",
]

pyarrow = ["pyarrow"]
fastparquet = ["fastparquet"]
s3fs = ["s3fs"]


[tool.poetry.dev-dependencies]
# requirements.dev is used to manage and install
# development dependencies, to avoid excessive delays
# in 'poetry update' when it tries to resolve all version
# conflicts in the dependency tree, including dev-deps;
# this also helps to avoid excess conflicts between dev-deps
# and actual project dependencies.  It is not as reliable
# as using poetry to manage it all, so liberal use of
# 'pip check' is recommended.

# Pin all the AWS SDK libs provided by AWS lambda
# - see also lambda/layer_builds.sh and note that
#   all these libs are removed from lambda layers
# - adding them here as dev-deps could force poetry
#   to constrain these versions when it tries to
#   resolve version compatibility for the app-deps;
#   without adding all these to the app-deps.
boto3 = '1.12.49'
botocore = '1.15.49'
docutils = '0.15.2'
jmespath = '0.9.5'
python_dateutil = '2.8.1'
s3transfer = '0.3.3'
six = '1.14.0'
urllib3 = '1.25.9'


[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
